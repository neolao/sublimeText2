= Sublime Package Control

A Sublime Text 2 (http://www.sublimetext.com/2) package manager for easily
discovering, install, upgrading and removing packages. Also includes an
automatic updater and package creation tool.

Packages can be installed from GitHub, BitBucket or custom package repositories.
The plugin uses a channel and repository system to allow users to find new
packages over time without any work. It also supports working with packages that
were manually installed.

== Installation

=== Via Console

The simplest installation is through the Sublime Text 2 console. This is
accessed via the ctrl+` shortcut. Once open, paste the following command
into the console:

{{{
import urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp) if not os.path.exists(ipp) else None;open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())
}}}

This command creates the //Installed Packages// directory for you, and then
downloads the {{{Package Control.sublime-package}}} into it.

Finally, restart Sublime Text 2.

=== Manually

Download http://sublime.wbond.net/Package%20Control.sublime-package and copy it
to your //Installed Packages// directory. This can be found by going to the
//Preferences// menu and selecting //Browse Packages…//, then browsing up a
folder. If you do not see a folder named //Installed Packages// on the same
level as //Packages//, you’ll need to create it.

After the {{{.sublime-package}}} file is in //Installed Packages//,
restart Sublime Text 2.

== Usage

Package Control is driven by the //Command Pallete//. To open the pallete,
press ctrl+shift+p (Windows, Linux) or cmd+shift+p (OS X). All Package Control
commands begin with {{{Package Control: }}}, so start by typing {{{Package}}}.

The command pallete will now show a number of commands:

* Add Repository
* Add Repository Channel
* Create Package File
* Create Binary Package File
* Disable Package
* Discover Packages
* Enable Package
* Install Package
* List Packages
* Remove Package
* Upgrade Package
* Package Control Settings – Default
* Package Control Settings – User

Well skip the concept of Repositories and Channels for now and dive into
discovering and installing your first package!

To learn about plugins, run the //Discover Packages// command. A list of all
available packages will be presented. Selecting a package will open its
homepage in your browser.

Once you have found a package you wish to install, run the //Install Package//
command. A quick-panel (like Goto Anything) will appear listing all available
packages. Select a package and Package Control will download the package file
and install the package into the running instance of Sublime Text 2.

Once a package is installed is can be removed or upgraded via the command
pallete.

By default Package Control checks for new versions on startup. This setting,
plus the list of channels and repositories are managed through the settings.
Settings can be opened via the command pallete, or the //Preferences > Package
Settings > Package Control > Settings – User// menu entry.

=== Channels and Repositories

Channels are JSON files hosted on a URL that contains a list of
repository URLs. See {{{example-repositories.json}}} for the format. When a user
requests to install a package, their channels are queried for a list of
repositories.

Repositories as JSON files hosted on a URL that contain a list of packages.
See {{{example-packages.json}}} for the format. The custom format allows
specifying platforms (windows, osx, linux) for packages and provides a
description and version.

In addition to supporting a custom JSON format for repositories, Package
Control supports GitHub and BitBucket URLs:

* https://github.com/user/repo
* https://github.com/organization_or_user
* https://bitbucket.org/user/repo

With these URLs, no work is necessary by the package developer to support
Package Control. Package Control parses JSON from the GitHub and BitBucket
APIs and uses their zip download functionality to fetch the package.

There is an option {{{package_name_map}}} in the settings to allow for
mapping repository names to package names. For instance, the {{{sode-theme}}}
repository on GitHub needs to be installed as {{{Theme - Soda}}} to function
properly. Channels may also specify name mapping.

Package Control comes with a single default channel installed. If you would
like one or more of your repositories added to the default channel, please fork
https://github.com/wbond/package_control_channel on GitHub or
https://bitbucket.org/wbond/package_control_channel on BitBucket
and send a pull request. You can also email me at will@wbond.net.

=== Creating a Package File

If you are developing a package, Package Control includes a command to
create a {{{.sublime-package}}} file for you from one of your package
directories. Just run the //Create Package// command and you can select what
package you would like to package up. The packager exlcudes various VCS
metadata, Sublime Text 2 cache files and {{{.pyc}}} files by default. The list
of excluded files can be tweaking through the settings.

== License

All of Sublime Package Control is licensed under the MIT license.

  Copyright (c) 2011 Will Bond <will@wbond.net>

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.